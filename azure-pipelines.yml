# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

# queue:
#  name: Hosted Ubuntu 1604

resources:
- repo: self

pool:
  vmImage: 'ubuntu-16.04' # other options: 'macOS-10.13', 'vs2017-win2016'

variables:
- group: MDLive-ProdVar

name: $(Date:yyyyMMdd)$(Rev:.r)

steps:
- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.4'
    addToPath: true

- script: sudo apt-get update
  displayName: 'Update packages'

- script: sudo apt-get install libmysqlclient-dev
  displayName: 'Install MySql client dev'

- script: |
    gem install bundler
    bundle install --retry=3 --jobs=4 --path vendor/bundle
  displayName: 'Bundle install'

- script: gem install rails && rails -v
  displayName: 'Install rails gem'

- bash: |
    ip=$(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}')
    az login --service-principal -u $APP_ID -p $APP_PASS --tenant microsoft.onmicrosoft.com
    az mysql server firewall-rule create --resource-group MdLiveMySQl-RG --server-name mdlivemysql --name AgentRule --start-ip-address $ip --end-ip-address $ip
  displayName: 'Open MySql firewall'
  failOnStderr: true
  env:
    APP_ID: $(APPID)
    APP_PASS: $(APPPASS)

- bash: bundle exec rake --trace db:migrate RAILS_ENV=$(RAILS_ENV)
  displayName: 'Run rake to migrate db'
  continueOnError: true
  env: 
    DB_HOST: $(DBHOST)
    DB_DATABASE: $(DBDATABASE)
    DB_USERNAME: $(DBUSERNAME)
    DB_PASSWORD: $(DBPASSWORD)

- task: AzureCLI@1
  displayName: 'Close MySql firewall'
  inputs:
    azureSubscription: 'MDLIveDB'
    scriptLocation: inlineScript
    inlineScript: 'az mysql server firewall-rule delete --resource-group MdLiveMySQl-RG --server-name mdlivemysql --name AgentRule --yes'

- bash: |
    bundle exec rake --trace assets:precompile
    secret=$(rails secret)
    az login --service-principal -u $PROD_APP_ID -p $PROD_APP_PASS --tenant microsoft.onmicrosoft.com
    az webapp config appsettings set --name MDLiveProd --resource-group mdlivewebapp-rg --settings DB_HOST=$DB_HOST DB_DATABASE=$DB_DATABASE DB_USERNAME=$DB_USERNAME DB_PASSWORD=$DB_PASSWORD
    az webapp config appsettings set --name MDLiveProd --resource-group mdlivewebapp-rg --settings RAILS_MASTER_KEY=$secret SECRET_KEY_BASE=$secret RAILS_SERVE_STATIC_FILES="true" ASSETS_PRECOMPILE="true"
  displayName: 'Configure web application settings'
  env:
    PROD_APP_ID: $(PRODAPPID)
    PROD_APP_PASS: $(PRODAPPPASS)
    DB_HOST: $(DBHOST)
    DB_DATABASE: $(DBDATABASE)
    DB_USERNAME: $(DBUSERNAME)
    DB_PASSWORD: $(DBPASSWORD)

- task: ArchiveFiles@2
  displayName: 'Archive files'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'

- task: AzureRmWebAppDeployment@4
  displayName: 'Azure App Service Deploy: MDLiveProd'
  inputs:
    azureSubscription: 'mdliveprod - Service Endpoint'
    appType: webAppLinux
    WebAppName: MDLiveProd
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
    RuntimeStack: 'RUBY|2.3'
    ScriptType: 'Inline Script'
    deploymentType: 'zipDeploy'
    InlineScript: |
     RBENV_VERSION=$(ls /usr/local/.rbenv/versions | grep 2.3 | tail -n 1)
     eval "$(rbenv init -)"
     rbenv global $RBENV_VERSION
     bundle install --path vendor/bundle