# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

# queue:
#  name: Hosted Ubuntu 1604

pool:
  vmImage: 'ubuntu-16.04' # other options: 'macOS-10.13', 'vs2017-win2016'

variables:
- group: MDLive-ProdVar

name: $(Date:yyyyMMdd)$(Rev:.r)

steps:
- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.4'
    addToPath: true

- script: sudo apt-get update
  displayName: 'Update packages'

- script: sudo apt-get install mysql-server
  displayName: 'Install MySql server'

- script: sudo apt-get install libmysqlclient-dev
  displayName: 'Install MySql client dev'

- script: |
    gem install bundler
    bundle install --retry=3 --jobs=4 --path vendor/bundle
  displayName: 'Bundle install'

- script: gem install rails && rails -v
  displayName: 'Install rails gem'

- bash: echo $RAILS_ENV
  displayName: 'Set environment variables for rake'
  failOnStderr: true
  env: 
    DB_HOST: $(DBHOST)
    DB_DATABASE: $(DBDATABASE)
    DB_USERNAME: $(DBUSERNAME)
    DB_PASSWORD: $(DBPASSWORD)
    RAILS_ENV: production

- script: |
    ip=$(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}')
    export AGENT_IP=$ip
  displayName: 'Get agent ip address'

- task: AzureCLI@1
  displayName: 'Open MySql firewall'
  inputs:
    azureSubscription: 'MDLIveDB'
    scriptLocation: inlineScript
    inlineScript: 'echo $AGENT_IP && az mysql server firewall-rule create --resource-group MdLiveMySQl-RG --server-name mdlivemysql --name AgentRule --start-ip-address 0.0.0.0 --end-ip-address 255.255.255.255'

- script: bundle exec rake --trace db:migrate
  displayName: 'Run rake to migrate db'
  continueOnError: true

- task: AzureCLI@1
  displayName: 'Close MySql firewall'
  inputs:
    azureSubscription: 'MDLIveDB'
    scriptLocation: inlineScript
    inlineScript: 'az mysql server firewall-rule delete --resource-group MdLiveMySQl-RG --server-name mdlivemysql --name AgentRule --yes'

- task: ArchiveFiles@2
  displayName: 'Archive files'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'